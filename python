Python中数组的下表：
a  b  c  d  e  f
0  1  2  3  4  5
-6 -5 -4 -3 -2 -1

除了索引，字符串还支持 切片。索引可以提取单个字符，切片 则提取子字符串：//切片是左闭右开的区间，就是最右边的索引是取不到的

>>> word[0:2]  # characters from position 0 (included) to 2 (excluded)
'Py'
>>> word[2:5]  # characters from position 2 (included) to 5 (excluded)
'tho'
切片索引的默认值很有用；省略开始索引时，默认值为 0，省略结束索引时，默认为到字符串的结尾：

>>> word[:2]   # character from the beginning to position 2 (excluded)
'Py'
>>> word[4:]   # characters from position 4 (included) to the end
'on'
>>> word[-2:]  # characters from the second-last (included) to the end
'on'
注意，输出结果包含切片开始，但不包含切片结束。因此，s[:i] + s[i:] 总是等于 s：

>>> word[:2] + word[2:]
'Python'
>>> word[:4] + word[4:]
'Python'
还可以这样理解切片，索引指向的是字符 之间 ，第一个字符的左侧标为 0，最后一个字符的右侧标为 n ，n 是字符串长度。例如：

 +---+---+---+---+---+---+
 | P | y | t | h | o | n |
 +---+---+---+---+---+---+
 0   1   2   3   4   5   6
-6  -5  -4  -3  -2  -1

列表
Python 支持多种 复合 数据类型，可将不同值组合在一起。最常用的 列表 ，是用方括号标注，逗号分隔的一组值。列表 可以包含不同类型的元素，但一般情况下，各个元素的类型相同：

>>> squares = [1, 4, 9, 16, 25]
>>> squares
[1, 4, 9, 16, 25]
和字符串（及其他内置 sequence 类型）一样，列表也支持索引和切片：

>>> squares[0]  # indexing returns the item
1
>>> squares[-1]
25
>>> squares[-3:]  # slicing returns a new list
[9, 16, 25]
切片操作返回包含请求元素的新列表。以下切片操作会返回列表的 浅拷贝：

>>> squares[:]
[1, 4, 9, 16, 25]
列表还支持合并操作：

>>> squares + [36, 49, 64, 81, 100]
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
与 immutable 字符串不同, 列表是 mutable 类型，其内容可以改变：

>>> cubes = [1, 8, 27, 65, 125]  # something's wrong here
>>> 4 ** 3  # the cube of 4 is 64, not 65!
64
>>> cubes[3] = 64  # replace the wrong value
>>> cubes
[1, 8, 27, 64, 125]
append() 方法 可以在列表结尾添加新元素（详见后文）:

>>> cubes.append(216)  # add the cube of 6
>>> cubes.append(7 ** 3)  # and the cube of 7
>>> cubes
[1, 8, 27, 64, 125, 216, 343]
为切片赋值可以改变列表大小，甚至清空整个列表：
 
>>> letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
>>> letters
['a', 'b', 'c', 'd', 'e', 'f', 'g']
>>> # replace some values
>>> letters[2:5] = ['C', 'D', 'E']
>>> letters
['a', 'b', 'C', 'D', 'E', 'f', 'g']
>>> # now remove them
>>> letters[2:5] = []
>>> letters
['a', 'b', 'f', 'g']
>>> # clear the list by replacing all the elements with an empty list
>>> letters[:] = []
>>> letters
[]
内置函数 len() 也支持列表：

>>> letters = ['a', 'b', 'c', 'd']
>>> len(letters)
4
还可以嵌套列表（创建包含其他列表的列表），例如：

>>> a = ['a', 'b', 'c']
>>> n = [1, 2, 3]
>>> x = [a, n]
>>> x
[['a', 'b', 'c'], [1, 2, 3]]
>>> x[0]
['a', 'b', 'c']
>>> x[0][1]
'b'

循环
py的循环例如while a<10://后面要加一个冒号代表循环
判断循环的范围是通过缩进来判断的
关键字参数 end 可以取消输出后面的换行, 或用另一个字符串结尾：
>>> a, b = 0, 1
>>> while a < 1000:
...     print(a, end=',') //while自动换行，加上end=','之后就可以不换行
...     a, b = b, a+b
...
0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,

x = int(input("Please enter an integer: ")) //从键盘读入一个整数x

内置函数 range() 常用于遍历数字序列，该函数可以生成算术级数：

>>> for i in range(5):
...     print(i)
...
0
1
2
3
4
生成的序列不包含给定的终止数值；range(10) 生成 10 个值，这是一个长度为 10 的序列，其中的元素索引都是合法的。range 可以不从 0 开始，还可以按指定幅度递增（递增幅度称为 '步进'，支持负数）：

>>> list(range(5, 10))
[5, 6, 7, 8, 9]

>>> list(range(0, 10, 3))
[0, 3, 6, 9]

>>> list(range(-10, -100, -30))
[-10, -40, -70]
range() 和 len() 组合在一起，可以按索引迭代序列：

>>> a = ['Mary', 'had', 'a', 'little', 'lamb']
>>> for i in range(len(a)):
...     print(i, a[i])
...
0 Mary
1 had
2 a
3 little
4 lamb

break 语句和 C 中的类似，用于跳出最近的 for 或 while 循环。

pass 语句不执行任何操作。语法上需要一个语句，但程序不实际执行任何动作时，可以使用该语句。例如：
while True:
    pass  # Busy-wait for keyboard interrupt (Ctrl+C)

定义函数
下列代码创建一个可以输出限定数值内的斐波那契数列函数：

>>>
def fib(n):    # write Fibonacci series up to n
    """Print a Fibonacci series up to n."""
    a, b = 0, 1
    while a < n:
        print(a, end=' ') //输出不换行
        a, b = b, a+b
    print()

# Now call the function we just defined:
fib(2000)

定义 函数使用关键字 def，后跟函数名与括号内的形参列表。函数语句从下一行开始，并且必须缩进。

函数内的第一条语句是字符串时，该字符串就是文档字符串，也称为 docstring，详见 文档字符串。利用文档字符串可以自动生成在线文档或打印版文档，还可以让开发者在浏览代码时直接查阅文档；Python 开发者最好养成在代码中加入文档字符串的好习惯。

函数在 执行 时使用函数局部变量符号表，所有函数变量赋值都存在局部符号表中；引用变量时，首先，在局部符号表里查找变量，然后，是外层函数局部符号表，再是全局符号表，最后是内置名称符号表。因此，尽管可以引用全局变量和外层函数的变量，但最好不要在函数内直接赋值（除非是 global 语句定义的全局变量，或 nonlocal 语句定义的外层函数变量）。

在调用函数时会将实际参数（实参）引入到被调用函数的局部符号表中；因此，实参是使用 按值调用 来传递的（其中的 值 始终是对象的 引用 而不是对象的值）。 1 当一个函数调用另外一个函数时，会为该调用创建一个新的局部符号表。

数据结构
1.列表详解
列表数据类型支持很多方法，列表对象的所有方法所示如下：

list.append(x)
在列表末尾添加一个元素，相当于 a[len(a):] = [x] 。

list.extend(iterable)
用可迭代对象的元素扩展列表。相当于 a[len(a):] = iterable 。

list.insert(i, x)
在指定位置插入元素。第一个参数是插入元素的索引，因此，a.insert(0, x) 在列表开头插入元素， a.insert(len(a), x) 等同于 a.append(x) 。

list.remove(x)
从列表中删除第一个值为 x 的元素。未找到指定元素时，触发 ValueError 异常。

list.pop([i])
删除列表中指定位置的元素，并返回被删除的元素。未指定位置时，a.pop() 删除并返回列表的最后一个元素。（方法签名中 i 两边的方括号表示该参数是可选的，不是要求输入方括号。这种表示法常见于 Python 参考库）。

list.clear()
删除列表里的所有元素，相当于 del a[:] 。

list.index(x[, start[, end]])
返回列表中第一个值为 x 的元素的零基索引。未找到指定元素时，触发 ValueError 异常。

可选参数 start 和 end 是切片符号，用于将搜索限制为列表的特定子序列。返回的索引是相对于整个序列的开始计算的，而不是 start 参数。

list.count(x)
返回列表中元素 x 出现的次数。

list.sort(*, key=None, reverse=False)
就地排序列表中的元素（要了解自定义排序参数，详见 sorted()）。

list.reverse()
翻转列表中的元素。

list.copy()
返回列表的浅拷贝。相当于 a[:] 。

2.集合
Python 还支持 集合 这种数据类型。集合是由不重复元素组成的无序容器。基本用法包括成员检测、消除重复元素。集合对象支持合集、交集、差集、对称差分等数学运算。

创建集合用花括号或 set() 函数。注意，创建空集合只能用 set()，不能用 {}，{} 创建的是空字典，下一小节介绍数据结构：字典。

以下是一些简单的示例

basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
print(basket)                      # show that duplicates have been removed

set使用大括号包围起来的

a = set('abracadabra')
b = set('alacazam')
a                                  # unique letters in a

a - b                              # letters in a but not in b

a | b                              # letters in a or b or both

a & b                              # letters in both a and b

a ^ b                              # letters in a or b but not both

与 列表推导式 类似，集合也支持推导式：

>>> a = {x for x in 'abracadabra' if x not in 'abc'}
>>> a
{'r', 'd'}

3.字典
字典 （参见 映射类型 --- dict） 也是一种常用的 Python 內置数据类型。其他语言可能把字典称为 联合内存 或 联合数组。与以连续整数为索引的序列不同，字典以 关键字 为索引，关键字通常是字符串或数字，也可以是其他任意不可变类型。只包含字符串、数字、元组的元组，也可以用作关键字。但如果元组直接或间接地包含了可变对象，就不能用作关键字。列表不能当关键字，因为列表可以用索引、切片、append() 、extend() 等方法修改。

可以把字典理解为 键值对 的集合，但字典的键必须是唯一的。花括号 {} 用于创建空字典。另一种初始化字典的方式是，在花括号里输入逗号分隔的键值对，这也是字典的输出方式。

字典的主要用途是通过关键字存储、提取值。用 del 可以删除键值对。用已存在的关键字存储值，与该关键字关联的旧值会被取代。通过不存在的键提取值，则会报错。

对字典执行 list(d) 操作，返回该字典中所有键的列表，按插入次序排列（如需排序，请使用 sorted(d)）。检查字典里是否存在某个键，使用关键字 in。


# Fibonacci numbers module

def fib(n):    # write Fibonacci series up to n
    a, b = 0, 1
    while a < n:
        print(a, end=' ')
        a, b = b, a+b
    print()

def fib2(n):   # return Fibonacci series up to n
    result = []
    a, b = 0, 1
    while a < n:
        result.append(a)
        a, b = b, a+b
    return result
现在，进入 Python 解释器，用以下命令导入该模块：

import fibo  // //py中调用文件就是先from (文件路径) import (.py的文件名称) as (你取的别名)，这个例子是因为当前就在该文件所在的目录，所以不需要from，且没有设置别名
那么对象就相当于是fibo

fibo.fib(1000) //相当于c中的对象调用其函数

fibo.fib2(100)

fibo.__name__

如果经常使用某个函数，可以把它赋值给局部变量：

fib = fibo.fib
fib(500)

读写文件
open() 返回一个 file object ，最常使用的是两个位置参数和一个关键字参数：open(filename, mode, encoding=None)

f = open('workfile', 'w', encoding="utf-8")
第一个实参是文件名字符串。第二个实参是包含描述文件使用方式字符的字符串。mode 的值包括 'r' ，表示文件只能读取；'w' 表示只能写入（现有同名文件会被覆盖）；'a' 表示打开文件并追加内容，任何写入的数据会自动添加到文件末尾。'r+' 表示打开文件进行读写。mode 实参是可选的，省略时的默认值为 'r'。

通常情况下，文件是以 text mode 打开的，也就是说，你从文件中读写字符串，这些字符串是以特定的 encoding 编码的。如果没有指定 encoding ，默认的是与平台有关的（见 open() ）。因为 UTF-8 是现代事实上的标准，除非你知道你需要使用一个不同的编码，否则建议使用 encoding="utf-8" 。在模式后面加上一个 'b' ，可以用 binary mode 打开文件。二进制模式的数据是以 bytes 对象的形式读写的。在二进制模式下打开文件时，你不能指定 encoding 。

在文本模式下读取文件时，默认把平台特定的行结束符（Unix 上为 \n, Windows 上为 \r\n）转换为 \n。在文本模式下写入数据时，默认把 \n 转换回平台特定结束符。这种操作方式在后台修改文件数据对文本文件来说没有问题，但会破坏 JPEG 或 EXE 等二进制文件中的数据。注意，在读写此类文件时，一定要使用二进制模式。

在处理文件对象时，最好使用 with 关键字。优点是，子句体结束后，文件会正确关闭，即便触发异常也可以。而且，使用 with 相比等效的 try-finally 代码块要简短得多：

with open('workfile', encoding="utf-8") as f:
    read_data = f.read()

# We can check that the file has been automatically closed.
f.closed

如果没有使用 with 关键字，则应调用 f.close() 关闭文件，即可释放文件占用的系统资源。

警告 调用 f.write() 时，未使用 with 关键字，或未调用 f.close()，即使程序正常退出，也**可能** 导致 f.write() 的参数没有完全写入磁盘。
通过 with 语句，或调用 f.close() 关闭文件对象后，再次使用该文件对象将会失败。

f.close()
f.read()

文件对象的方法
本节下文中的例子假定已创建 f 文件对象。

f.read(size) 可用于读取文件内容，它会读取一些数据，并返回字符串（文本模式），或字节串对象（在二进制模式下）。 size 是可选的数值参数。省略 size 或 size 为负数时，读取并返回整个文件的内容；文件大小是内存的两倍时，会出现问题。size 取其他值时，读取并返回最多 size 个字符（文本模式）或 size 个字节（二进制模式）。如已到达文件末尾，f.read() 返回空字符串（''）。

f.read()

f.readline() 从文件中读取单行数据；字符串末尾保留换行符（\n），只有在文件不以换行符结尾时，文件的最后一行才会省略换行符。这种方式让返回值清晰明确；只要 f.readline() 返回空字符串，就表示已经到达了文件末尾，空行使用 '\n' 表示，该字符串只包含一个换行符。

f.readline()

从文件中读取多行时，可以用循环遍历整个文件对象。这种操作能高效利用内存，快速，且代码简单：

>>>
for line in f:
    print(line, end='')

如需以列表形式读取文件中的所有行，可以用 list(f) 或 f.readlines()。

f.write(string) 把 string 的内容写入文件，并返回写入的字符数。

>>>
f.write('This is a test\n')

写入其他类型的对象前，要先把它们转化为字符串（文本模式）或字节对象（二进制模式）：

>>>
value = ('the answer', 42)
s = str(value)  //在写文件的时候一定要转化为字符串类型
f.write(s)

f.tell() 返回整数，给出文件对象在文件中的当前位置，表示为二进制模式下时从文件开始的字节数，以及文本模式下的意义不明的数字。

f.seek(offset, whence) 可以改变文件对象的位置。通过向参考点添加 offset 计算位置；参考点由 whence 参数指定。 whence 值为 0 时，表示从文件开头计算，1 表示使用当前文件位置，2 表示使用文件末尾作为参考点。省略 whence 时，其默认值为 0，即使用文件开头作为参考点。

>>>
f = open('workfile', 'rb+')
f.write(b'0123456789abcdef')

f.seek(5)      # Go to the 6th byte in the file

f.read(1)

f.seek(-3, 2)  # Go to the 3rd byte before the end

f.read(1)

在文本文件（模式字符串未使用 b 时打开的文件）中，只允许相对于文件开头搜索（使用 seek(0, 2) 搜索到文件末尾是个例外），唯一有效的 offset 值是能从 f.tell() 中返回的，或 0。其他 offset 值都会产生未定义的行为。

错误和异常处理
如果存在 finally 子句，则 finally 子句是 try 语句结束前执行的最后一项任务。不论 try 语句是否触发异常，都会执行 finally 子句。以下内容介绍了几种比较复杂的触发异常情景：

如果执行 try 子句期间触发了某个异常，则某个 except 子句应处理该异常。如果该异常没有 except 子句处理，在 finally 子句执行后会被重新触发。

except 或 else 子句执行期间也会触发异常。 同样，该异常会在 finally 子句执行之后被重新触发。

如果 finally 子句中包含 break、continue 或 return 等语句，异常将不会被重新引发。

如果执行 try 语句时遇到 break,、continue 或 return 语句，则 finally 子句在执行 break、continue 或 return 语句之前执行。

如果 finally 子句中包含 return 语句，则返回值来自 finally 子句的某个 return 语句的返回值，而不是来自 try 子句的 return 语句的返回值。
这是一个比较复杂的例子：

def divide(x, y):
    try:
        result = x / y
    except ZeroDivisionError:
        print("division by zero!")
    else:
        print("result is", result)
    finally:
        print("executing finally clause")
divide(2, 1)

divide(2, 0)

divide("2", "1")

如上所示，任何情况下都会执行 finally 子句。except 子句不处理两个字符串相除触发的 TypeError，因此会在 finally 子句执行后被重新触发。

1.如果字符串中需要撇号，请使用双引号。
例："Python's a great language"

2.类型的强制转换：Int(Item)将Item转换为int。
Float(Item)将Item转换为Float

3.在python里面5/4=1.25,5//4=1,5**4=625(5的四次方)

4.字符串的特定元素由方括号[]括起来的元素的索引访问
hello_str = 'Hello World'

print(hello_str[1])  => prints e

print(hello_str[-1]) => prints d

print(hello_str[11]) => ERROR

5.切片是选择整个序列的子序列的能力,hellostring="hello world",若hellostring[6:10]就是worl(因为中间有个空格,而且切片这个方法是从6开始，在小于10的
时候结束，也就是在9的时候结束) hellostring[:5]也就是从一开始到小于5的地方，就是"hello",hellostring[6:]也就是6开始到小于-1的地方(-1是最后一个字符
"d"的下一位，所以此输出的东西就是world）
还可以使用三个参数[start:stop:step]：s = 'hello world'       s[0:11:2]== 'hlowrd'(从0开始到小于11的地方，且每次跳两个字符)
反转字符串：s = "madam I'm adam"  reversed = s[::-1]

6.in:可以检查字符串中是否存在子字符串，即in运算符。返回True或False

7.len(a):Len函数将字符串或其他序列作为参数，并返回一个整数，即项目的长度。

8.a.find(''): word = 'hello'   word.find('l')会输出2      #在字符串之中找到'l'的索引位置，注意方法find是如何对字符串对象word进行操作的，这两个对象通
过使用“点”符号关联在一起：word.find(‘l’)

9.>>> s = "Hello world"
>>> s.upper()
'HELLO WORLD'
>>> s.title()(用标题的方式输出，也就是首字母大写)
'Hello World'

10.format():  print("You want {}. It costs ${:.2f}".format(product, price)）(price保留两位小数）
 print('{:>10s} is {:<10d} years old.'.format('Bill',25))
{:>10s}字符串10个空格宽,(包括对象)，右对齐(>)
{:<10d}十进制10个空格宽(包括对象)，左对齐(>)

11.string = "Python"(enumerate()函数返回两个值：元素的索引和元素本身。我可以使用它同时迭代索引和元素，执行双重赋值)
for i, character in enumerate(string):
    print(f"{i} is {character}")
输出结果： 0 is P
                 1 is y...

12.split('参数字符'):Split函数将获取一个字符串，并根据参数字符将其拆分成包含多个新字符串部分的列表(列表是关键字！！！)，说白了split方法是返回一个
列表。例:
words = 'this is a test'.split()
words => ['this', 'is', 'a', 'test']

13.读写文件:(1)file_object = open(filename, mode)（filename为文件名字，mode为读取的方式，可以是读或者写)
例:
out_file = open("data.txt", "w")  # writing
in_file = open(FILENAME, "r")  # reading 
(2)完成对文件的数据读取或写入后，应始终将其关闭:file_object.close()
例:
out_file.close()
in_file.close()
(3)Read:'r'方法将整个文件内容读取到一个字符串中。仅当文件已打开以供读取时才起作用。请记住，文本文件中的所有内容都是字符串。你读到的所有东西都是
字符串(包括数字)。如果写入文件，则只能写入字符串
FILENAME = "testfile.txt"
in_file = open(FILENAME)
text = in_file.read()
in_file.close()(一定要记得关闭文件，不然会发生数据的丢失)
print(text)
(4)如果您想要在现有文件(例如日志文件)的末尾添加数据，您可以使用‘a’模式表示“追加”。
(5)写数据:一旦创建了一个打开以进行写入的文件对象，就可以通过添加关键字参数(如file=file_object)使用Print对其进行写入
name = input("Name: ")
out_file = open("name.txt", "w")
print(name, file=out_file)
out_file.close()

14.try...except...:try包含我们希望在其执行过程中监视错误的代码,如果try中任何地方发生错误，Python都会寻找可以处理错误的处理程序。
例：
try:
    number = int(input("? "))
    print(10 / number)
except ValueError:(没输入整数)
    print("Not a valid integer")
except ZeroDivisionError:(除数不能为0)
    print("Can't divide by zero")
except:(出现其他的错误)
    print("Some other exception happened")

数据结构：
print(values,end=' ')(end这就是不换行的意思)
15.列表：当您将列表命名为复数时，列表中的项是单数。例：for item in items   or    for dog in dogs  判断有没有某个字符串用"in"判断，计算列表长度用
len()来判断。
(1) [1, 2, 3] + [4] => [1, 2, 3, 4]
     [1, 2, 3] * 2 => [1, 2, 3, 1, 2, 3]
     1 in [1, 2, 3] => True
     [1, 2, 3] < [1, 2, 4] => True
(2)things = ['a', [1, 2, 3], 'z']  things[1][0]=1
(3)min(values):列表的最小元素，必须都是同一类型    max(values):最大元素，也必须为同一个类型    sum(values):元素的总和，仅限数字
(4)things = list('xyzabc')
    things  ['x', 'y', 'z', 'a', 'b', 'c']
    things.sort()
    things ['a', 'b', 'c', 'x', 'y', 'z']
(5).itemgetter方法：例 data = [['Derek', 7], ['Carrie', 8], ['Bob', 6], ['Aaron', 9]]正常用sort()函数会按照首字母来排序，如果想用年龄也就是数字
来排序，就要用itemgetter方法   data.sort(key=itemgetter(1))(要调用库函数：from operator import itemgetter)
                                                  [['Bob', 6], ['Derek', 7], ['Carrie', 8], ['Aaron', 9]]
(6)x is y:执行引用相等，检查两个变量是否引用内存中的同一对象。
numbers = [10, 20, 30]
things = numbers
new_things = [10, 20, 30]
things == numbers      # True
things is numbers      # True !!
new_things == numbers  # True
new_things is numbers  # False(只要没有出现new_things=numbers的语句，is一定返回false)
(7)numbers = [10, 20, 30]
    things = numbers(此现象不是函数的复制，而是别名)
    numbers.append(40)
    print(numbers)  # [10, 20, 30, 40]
    print(things)   # [10, 20, 30, 40]
(8)n for n in range ():先算for n in range，再算n for n
[n ** 2 for n in range(1, 6)](请注意，我们只能更改正在迭代的值)
returns [1, 4, 9, 16, 25]

[x + y for x in range(1, 4) for y in range (1, 4)]
等价于：
things = []
for x in range(1, 4):
	  for y in range(1, 4):
        things.append(x + y)
=> [2, 3, 4, 3, 4, 5, 4, 5, 6]

16.元组：元组就像不可变的列表，它们使用()而不是[](要记住是不可变的喔)
(1)创建一个元组,对于元组，您可以将逗号视为构成元组的运算符，其中()只是充当分组：
my_tuple = 1, 2  # creates (1, 2)
my_tuple = (1,)  # creates (1) 
my_tuple = 1,    # creates (1)
my_tuple = (1)   # creates 1 not (1)(没有逗号，这不是创建一个元组)

17.def box(height=10, width=20, length=30):
     print(height, width, length)
box()	# prints 10 20 30
box(width=2, height=5) # prints 5 2 30(实参改变形参)

18.字典：您可以将其视为一对，其中对中的第一个元素(key)用于检索第二个元素(value）
(1).字典的创建：
contacts = {'bill': '353-1234', 'rich': '269-1234', 'jane': '352-1234'}
print(contacts)
{'jane': '352-1234', 
 'bill': '353-1234', 
 'rich': '369-1234'}key必须是不可变的，字符串、整数、元组都可以。不允许使用列表(它们是可变的)
(2)与列表一样，字典也是一种可变的数据结构。您可以通过各种操作(如索引分配)更改对象:
my_dict = {'bill': 3, 'rich': 10}
print(my_dict['bill'])	# prints 2
my_dict['bill'] = 100
print(my_dict['bill'])	# prints 100
(3)各种方法以及函数：
方法：
len(my_dict)计算key的数量
element in my_dict 查看字典中有没有key名为element的
for key in range(my_dict) 遍历字典中的key
函数：
my_dict.clear()清空字典
my_dict.sorted()只对key排序
my_dict.update(other_dict)对于other_dict中的每个key，使用key/value替换my_dict
my_dict.pop(key) 移除key，返回其value
my_dict.items()遍历字典，所有key/value对均为元组
my_dict.keys()所有的key
my_dict.values()所有的value
(4)1.for key in my_dict:
          print(key) (输出所有的key)
     2.for value in my_dict:
          print(value)
     3.for key, value in my_dict.items():
           print(key, value)(输出所有的key/value对)    
